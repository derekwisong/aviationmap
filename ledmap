#!/usr/bin/env python
import avwx.map
from pkg_resources import resource_filename
import logging
import os
import time
import signal
import sys
from flask import Flask

map = None
app = Flask(__name__)

@app.route("/map/off")
def map_off():
    logger = logging.getLogger(__name__)
    logger.info("Request to turn map off")
    map.off()
    return "OFF"

@app.route("/map/on")
def map_on():
    logger = logging.getLogger(__name__)
    logger.info("Request to turn map on")
    map.on()
    return "ON"

def terminate(signal_number, frame):
    if map:
        map.stop()
    
    sys.exit()

if __name__ == '__main__':
    signal.signal(signal.SIGTERM, terminate)
    import argparse

    logger = logging.getLogger(__name__)

    parser = argparse.ArgumentParser(description="LED VFR Map")
    parser.add_argument('-c', '--config', type=str, dest='config',
                        default=resource_filename('avwx', 'config.yml'),
                        help="Configuration file")
    parser.add_argument('-v', '--verbose', action='store_const', const=True,
                        dest='verbose', default=False,
                        help="Show more verbose logging output")
    parser.add_argument('-d', '--debug', action='store_const', const=True,
                        dest='debug', default=False,
                        help="Run Flask server in debug mode")
    parser.add_argument('-p', '--port', type=int, default=9999,
                        help='Port for web server to listen on')
    args = parser.parse_args()

    logfmt = "[%(levelname)s %(asctime)s %(module)s %(threadName)s] %(message)s"
    level = logging.INFO

    if args.verbose:
        level = logging.DEBUG

    logging.basicConfig(format=logfmt, level=level)

    if not os.path.exists(args.config):
        logger.error("Config file {} does not exist".format(args.config))
        exit(1)

    map = avwx.map.LedMap(args.config)
    app.run(debug=args.debug, port=9999, host='0.0.0.0')
    
    map.stop()
