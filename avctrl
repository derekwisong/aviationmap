#!/usr/bin/env python
import argparse
import logging

from avmap.control import Api, Config

logger = logging.getLogger(__name__)
config = Config()
api = Api(config.host, config.port)

def set_color(args: argparse.Namespace):
    red, green, blue = map(int, str(args.color).split(",")[:3])
    color = (red, green, blue)

    if api.set_color(args.station, color, show=args.show):
        logger.info(f"Set color {args.station} to {color}")
    else:
        raise SystemExit("Failed to set color")

def get_color(args: argparse.Namespace):
    color = api.get_color(args.station)
    logger.info(f"{args.station} color is {color}")


def show_config(args: argparse.Namespace):
    print(config.json())


def set_config(args):
    setattr(config, args.option, config._cast(args.option, args.value))
    config.save()


def build_color_parser(parser: argparse.ArgumentParser) -> None:
    subparsers = parser.add_subparsers()
    set_parser = subparsers.add_parser("set", help="set color")
    set_parser.add_argument("station", metavar="S", type=str, help="The station")
    set_parser.add_argument("color", metavar="C", type=str, help="The color")
    set_parser.add_argument("--show", action="store_true", default=False, help="Show the updated color")
    set_parser.set_defaults(func=set_color)

    get_parser = subparsers.add_parser("get", help="get color")
    get_parser.add_argument("station", metavar="S", type=str, help="The station")
    get_parser.set_defaults(func=get_color)


def build_config_parser(parser: argparse.ArgumentParser) -> None:
    subparsers = parser.add_subparsers()
    show_parser = subparsers.add_parser("show")
    show_parser.set_defaults(func=show_config)

    set_parser = subparsers.add_parser("set")
    set_parser.add_argument("option", help="option")
    set_parser.add_argument("value", help="value")
    set_parser.set_defaults(func=set_config)


def parse_args(args=None):
    parser = argparse.ArgumentParser(description="Aviation Map Controller")
    subparsers = parser.add_subparsers()

    color_parser = subparsers.add_parser("color", help="color commands")
    build_color_parser(color_parser)

    config_parser = subparsers.add_parser("config", help="config commands")
    build_config_parser(config_parser)

    return parser.parse_args(args)


def main():
    logging.basicConfig(level=logging.INFO)
    args = parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
